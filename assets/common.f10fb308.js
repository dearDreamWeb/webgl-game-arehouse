function c(e,o,t){const r=e.createShader(e.VERTEX_SHADER);e.shaderSource(r,o),e.compileShader(r);const a=e.createShader(e.FRAGMENT_SHADER);e.shaderSource(a,t),e.compileShader(a);const u=e.createProgram();return e.attachShader(u,r),e.attachShader(u,a),e.linkProgram(u),e.getShaderParameter(r,e.COMPILE_STATUS)||console.log(`\u9876\u70B9\u7740\u8272\u5668\u7F16\u8BD1\u5931\u8D25\uFF0C\u9519\u8BEF\u4FE1\u606F--> ${e.getShaderInfoLog(r)}`),e.getShaderParameter(a,e.COMPILE_STATUS)||console.log(`\u7247\u5143\u7740\u8272\u5668\u7F16\u8BD1\u5931\u8D25\uFF0C\u9519\u8BEF\u4FE1\u606F--> ${e.getShaderInfoLog(a)}`),e.getProgramParameter(u,e.LINK_STATUS)?e.useProgram(u):console.log(`\u7740\u8272\u5668\u8FDE\u63A5\u5931\u8D25\uFF0C\u9519\u8BEF\u4FE1\u606F--> ${e.getProgramInfoLog(u)}`),u}function S(e,o){return Math.random()*(o-e)+e}function d({x:e,y:o}){const t=document.querySelector("#canvasDom"),{x:r,y:a,width:u,height:n}=t.getBoundingClientRect();return{x:(e-r-u/2)/(u/2),y:-(o-a-n/2)/(n/2)}}export{c as i,d as n,S as r};
